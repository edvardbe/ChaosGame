package org.idatt2003.model.linalg;


import java.util.Objects;

/**
 * Record for 2x2 matrices.
 * The matrices are represented by four double values: a, b, c, and d.
 *
 * <br>
 * [ a b ]
 * <br>
 * [ c d ]
 *
 * <p>Chosen to use a, b, c, d instead of the traditional row, column notation for simplicity.
 */
public record Matrix2x2(double a, double b, double c, double d) {
  /**
   * Constructor for Matrix2x2.
   *
   * @param a first row, first column in the matrix.
   * @param b first row, second column in the matrix.
   * @param c second row, first column in the matrix.
   * @param d second row, second column in the matrix.
   */
  public Matrix2x2 {
  }


  /**
   * Method to multiply a 2x2 matrix with a 2D vector.
   * Multiplies the matrix x-values with the vector x-values and the matrix
   * y-values with the vector y-values.
   * Method add the results together to get a new vector with new x and y values.
   *
   * @param vector the vector to multiply with.
   * @return a new 2D vector.
   */
  public Vector2D multiply(Vector2D vector) {
    return new Vector2D(
            this.a * vector.getX() + this.b * vector.getY(),
            this.c * vector.getX() + this.d * vector.getY()
    );
  }

  /**
   * Equals method for Matrix2x2.
   * Compares the four double values of two Matrix2x2 objects.
   * Generated by IntelliJ IDEA.
   *
   * @param o the object to compare.
   * @return true if the objects are equal, false otherwise.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Matrix2x2 matrix2x2 = (Matrix2x2) o;
    return Double.compare(a, matrix2x2.a) == 0
            && Double.compare(b, matrix2x2.b) == 0
            && Double.compare(c, matrix2x2.c) == 0
            && Double.compare(d, matrix2x2.d) == 0;
  }

  /**
   * Hashcode method for Matrix2x2.
   * Use the four double values to generate the hashcode.
   * Generated by IntelliJ IDEA.
   *
   * @return the hashcode of the Matrix2x2 object.
   */
  @Override
  public int hashCode() {
    return Objects.hash(a, b, c, d);
  }
}
