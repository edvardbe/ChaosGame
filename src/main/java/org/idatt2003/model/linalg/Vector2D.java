package org.idatt2003.model.linalg;

import java.util.Objects;

/**
 * Class for 2D vectors.
 * Vectors are represented by an x-coordinate and a y-coordinate.
 * The class contains methods for adding and subtracting vectors.
 *
 * <p>Chosen to use x and y instead of the traditional row, column notation for simplicity.
 */
public class Vector2D {
  private final double x;
  private final double y;

  /**
   * Constructor for Vector2D.
   * Creates a new 2D vector with the given x and y coordinates.
   *
   * @param x x-coordinate
   * @param y y-coordinate
   */
  public Vector2D(double x, double y) {
    this.x = x;
    this.y = y;
  }

  public double getX() {
    return x;
  }

  public double getY() {
    return y;
  }

  /**
   * Add two vectors together.
   * The sum of two vectors is a new vector with
   * the sum of the x-coordinates and the sum of the y-coordinates.
   *
   * @param other the other vector
   * @return the sum of the two vectors
   */
  public Vector2D add(Vector2D other) {
    return new Vector2D(
            x + other.x,
            y + other.y);
  }

  /**
   * Subtract one vector from another.
   * The difference of two vectors is a new vector with
   * the difference of the x-coordinates and the difference of the y-coordinates.
   *
   * @param other the other vector
   * @return the difference of the two vectors
   */
  public Vector2D subtract(Vector2D other) {
    return new Vector2D(
            x - other.x,
            y - other.y);
  }

  /**
   * Scale a vector by a scalar.
   * The scaled vector is a new vector with the
   * x and y coordinates multiplied by the scalar.
   *
   * @param scalar the scalar to multiply the vector by
   * @return the scaled vector
   */
  public Vector2D scale(double scalar) {
    return new Vector2D(
            x * scalar,
            y * scalar);
  }

  /**
   * Multiply two vectors together.
   * The product of two vectors is a new vector with
   * the product of the x-coordinates and the product of the y-coordinates.
   *
   * @param other the other vector
   * @return the product of the two vectors
   */
  public Vector2D multiply(Vector2D other) {
    return new Vector2D(
            x * other.x,
            y * other.y);
  }

  /**
   * Divide one vector by another.
   * The quotient of two vectors is a new vector with
   * the quotient of the x-coordinates and the quotient of the y-coordinates.
   *
   * @param other the other vector
   * @return the quotient of the two vectors
   */
  public Vector2D divide(Vector2D other) {
    return new Vector2D(
            x / other.x,
            y / other.y);
  }

  /**
   * Calculate the squared length of a vector.
   * The squared magnitude of a vector is the sum
   * of the squares of the x and y coordinates.
   *
   * @return the squared length of the vector
   */
  public double lengthSq() {
    return x * x + y * y;
  }


  /**
   * Equals method for Vector2D.
   * Compares two vectors for equality.
   * Overrides the default equals method.
   * Generated by IntelliJ IDEA.
   *
   * @param o Object to compare
   * @return true if the vectors are equal, false otherwise
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vector2D vector2D = (Vector2D) o;
    return Double.compare(x, vector2D.x) == 0 && Double.compare(y, vector2D.y) == 0;
  }

  /**
   * Hashcode method for Vector2D.
   * Overrides the default hashcode method.
   * Generated by IntelliJ IDEA.
   *
   * @return the hashcode of the vector
   */
  @Override
  public int hashCode() {
    return Objects.hash(x, y);
  }
}
